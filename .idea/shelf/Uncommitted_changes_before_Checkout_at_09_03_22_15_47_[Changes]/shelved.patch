Index: Funciones.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\nimport csv\nimport math\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pl\nfrom matplotlib.collections import PolyCollection\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom scipy import signal\nfrom scipy.signal import argrelextrema\nfrom scipy.fft import fft, ifft, fftfreq\n#import pywt\n\ncm = 1/2.54  # centimeters in inches\n\ndef ReadFolderPout(fileInit, xRange, param):\n    #Read files (only xRange interval)\n    x = []; y = []; L = [];\n    NOF =len(param) # número de columnas\n    for i in range(NOF):\n        if fileInit + i  < 10:\n             file = 'W00' + str(fileInit + i) + '.CSV'\n             #file = 'W000' + str(fileInit + i) + '.csv'\n        else:\n             if fileInit + i  < 100:\n                #file = 'W00' + str(fileInit + i) + '.csv'\n                file = 'W00' + str(fileInit + i) + '.CSV'\n             else:\n                #file = 'W0' + str(fileInit + i) + '.csv'\n                file = 'W0' + str(fileInit + i) + '.CSV'\n\n        [xi, yi] = LoadFile(file, 29, xRange)\n        x.append(xi)\n        y.append(yi)\n        L.append(len(xi))\n    return [x,y,L]\n\ndef LoadFile(file,jump,xRange):\n    with open(file, newline='') as file:\n        reader = csv.reader(file, delimiter =',')\n        for k in range(jump):\n            next(reader)\n        xi = []; yi = []\n        for row in reader:\n            auxX = float(row[0])\n            auxY = float(row[1])\n            if (auxX >= xRange[0] and auxX <= xRange[1]):\n                xi.append(auxX)\n                yi.append(auxY)\n    return [xi,yi]\n\ndef List2df(x,y,L,param):\n#unifico la longitud de las listas para volverlas dataframe\n    NOF = len(param)\n    Lmax = max(L)\n    for i in range(NOF):\n        Li = L[i]\n        if Li < Lmax:\n            xMissed = (Lmax - Li)\n            noisyPAd = np.random.normal(-0.1, 0.2, xMissed)\n            nP= noisyPAd.tolist()\n            yP = [y[i][Li-1]] * xMissed\n            yPad = [sum(n) for n in zip(nP,yP)]\n            auxList = y[i] + yPad\n            y[i] = auxList\n            if i == 0:\n                xStep = round(x[i][1] - x[i][0], 4)\n                x0 = x[i][Li-1]\n                xPad = [x0 + x * xStep for x in range(0, xMissed)]\n                x[i] = x[i] + xPad\n                df = pd.DataFrame(list(zip(x[i], y[i])), columns=['Wavelength', str(param[i])])\n            else:\n                df[str(param[i])] = y[i]\n        else:\n            if i == 0:\n                df = pd.DataFrame(list(zip(x[i], y[i])), columns=['Wavelength', str(param[i])])\n            else:\n                df[str(param[i])] = y[i]\n    return df\n\ndef SelectDataFrame(df,xRange, param, indexSel):\n    NOF = len(indexSel)\n    paramStr = []\n    x = df[(df['Wavelength'] >= xRange[0]) & (df['Wavelength'] <= xRange[1])]['Wavelength'].tolist()\n    df1 = pd.DataFrame()\n    df1['Wavelength'] = x\n    for i in range(NOF):\n        k = indexSel[i]\n        paramStr.append(str(param[k]))\n        yi = df[(df['Wavelength'] >= xRange[0]) & (df['Wavelength'] <= xRange[1])][paramStr[i]].tolist()\n        df1[paramStr[i]] = yi\n    return df1\n\ndef PointsLinearity(df1, val):\n    col_names = df1.columns.values[1:]\n    paramStr = col_names.tolist()\n    NOF = len(paramStr)\n    if val == 'max':\n        for i in range(NOF):\n            df1['max' + str(i)] = df1.iloc[argrelextrema(df1[paramStr[i]].values, np.greater_equal, order=15)[0]][paramStr[i]]\n    elif val == 'min':\n        for i in range(NOF):\n            df1['min' + str(i)] = df1.iloc[argrelextrema(df1[paramStr[i]].values, np.less_equal, order=15)[0]][paramStr[i]]\n    else:\n        #falta verificar\n        valY1 = df1[(df1[paramStr] >= val)][paramStr]\n        kval = df1[(df1[paramStr] >= val)][paramStr].idxmin()\n        valX1 = df1[\"Wavelength\"].loc[kval].tolist()\n    return df1\n\ndef LinearityLaser(df, param, height, thresh, prom):\n    NOF = len(param)\n    paramStr = []; FWHM = []\n    for i in range(NOF):\n        paramStr.append(str(param[i]))\n        peaksIndex,properties = signal.find_peaks(df[paramStr[i]], height=height, threshold=thresh, prominence=prom)\n        Pmax = properties[\"peak_heights\"]\n        df['max' + str(i)] = df.loc[peaksIndex][paramStr[i]]\n        for j in range(len(Pmax)):\n            init = properties[\"left_bases\"][j]\n            ending = properties[\"right_bases\"][j]\n            k=[index for index, value in enumerate(df[properties[\"left_bases\"][j]:properties[\"right_bases\"][j]][paramStr[i]]) if value > Pmax[j] - 3]\n            k1 = init + k[1]\n            k2 = init + k[-1]\n            FWHM = df.iloc[k2,0]- df.iloc[k1,0]\n            if j==0:\n                df['FWHM' + str(i)] = df.loc[peaksIndex][paramStr[i]] # onlycreating the column\n            df['FWHM' + str(i)][peaksIndex[j]] = FWHM\n    return df\n\ndef PlotInteractiveTx(df1, paramTitle):\n    col_names = df1.columns.values[1:]\n    paramStr = col_names.tolist()\n    NOF = len(paramStr)\n    colorLegend =[ ' black', ' blue', ' blueviolet', ' brown', ' cadetblue', ' chocolate', ' coral',\n                    ' cornflowerblue', ' crimson', ' darkblue', ' darkcyan', ' darkmagenta', ' darkorange', ' darkred',\n                    ' darkseagreen', ' darkslategray', ' darkviolet', ' deeppink', ' deepskyblue', ' dodgerblue',\n                    ' firebrick', ' forestgreen', ' fuchsia', ' gold', ' goldenrod', ' green', ' hotpink', ' indianred',\n                    ' indigo', ' orangered', ' purple', ' rebeccapurple', ' red', ' saddlebrown', ' salmon',\n                    ' seagreen', ' sienna', ' slateblue', ' steelblue', ' violet', ' yellowgreen', 'aqua', 'aquamarine',\n                    'darkgoldenrod', 'darkorchid', 'darkslateblue', 'darkturquoise', 'greenyellow', 'navy',\n                    'palevioletred', 'royalblue', 'sandybrown']\n\n    A = df1[\"Wavelength\"].tolist()\n    fig1 = make_subplots()\n    for i in range(NOF):\n        B = df1[paramStr[i]]\n        fig1.add_trace(go.Scatter(\n            x=A,\n            y=B,\n            legendgroup = 'lgd'+str(i),\n            name=paramStr[i],\n            mode=\"lines\",\n            line_color=colorLegend[i],\n            ))\n    fig1.update_layout(legend_title_text=paramTitle)\n    return fig1\n\ndef PlotInteractive(df1, param, paramTitle, val):\n    NOF = len(param)\n    colorLegend =[ ' black', ' blue', ' blueviolet', ' brown', ' cadetblue', ' chocolate', ' coral',\n                    ' cornflowerblue', ' crimson', ' darkblue', ' darkcyan', ' darkmagenta', ' darkorange', ' darkred',\n                    ' darkseagreen', ' darkslategray', ' darkviolet', ' deeppink', ' deepskyblue', ' dodgerblue',\n                    ' firebrick', ' forestgreen', ' fuchsia', ' gold', ' goldenrod', ' green', ' hotpink', ' indianred',\n                    ' indigo', ' orangered', ' purple', ' rebeccapurple', ' red', ' saddlebrown', ' salmon',\n                    ' seagreen', ' sienna', ' slateblue', ' steelblue', ' violet', ' yellowgreen', 'aqua', 'aquamarine',\n                    'darkgoldenrod', 'darkorchid', 'darkslateblue', 'darkturquoise', 'greenyellow', 'navy',\n                    'palevioletred', 'royalblue', 'sandybrown']\n    A = df1[\"Wavelength\"].tolist()\n    fig1 = make_subplots(1,2)\n    paramStr = []\n    for i in range(NOF):\n        paramStr.append(str(param[i]))\n        B = df1[str(param[i])]\n        fig1.add_trace(go.Scatter(\n            x=A,\n            y=B,\n            legendgroup = 'lgd'+str(i),\n            name=paramStr[i],\n            mode=\"lines\",\n            line_color=colorLegend[i],\n            ),row=1, col=1)\n    fig1.update_layout(legend_title_text=paramTitle)\n    # add val points\n    for i in range(len(paramStr)):\n        A1 = df1[~pd.isnull(df1[val + str(i)])]['Wavelength'].tolist()\n        B1 = df1[~pd.isnull(df1[val + str(i)])][paramStr[i]].tolist()\n        fig1.add_trace(go.Scatter(\n            x=A1,\n            y=B1,\n            legendgroup = 'lgd'+ str(i),\n            name =paramStr[i],\n            mode =\"markers\",\n            marker_color = colorLegend[i],\n            showlegend=False\n            ),row =1, col =1)\n    for i in range(len(paramStr)):\n        BB = df1[~pd.isnull(df1[val + str(i)])]['Wavelength'].tolist()\n        AA = [param[i]]*len(BB)\n        fig1.add_trace(go.Scatter(\n            x= AA,\n            y=BB,\n            legendgroup ='lgd' + str(i),\n            name =paramStr[i],\n            mode =\"markers\",\n            marker_color = colorLegend[i],\n            showlegend=False,\n            ),row=1, col=2)\n    return fig1\n\ndef ReadFolderStability(fileInit, xRange, yRange, param):\n    #Read files (only xRange interval)\n    x = []; y = []; L = [];\n    NOF =len(param) # número de columnas\n    for i in range(0, NOF, 4):\n        if fileInit + i  < 10:\n             file = 'W00' + str(fileInit + i) + '.CSV'\n        else:\n             if fileInit + i  < 100:\n                file = 'W00' + str(fileInit + i) + '.CSV'\n             else:\n                file = 'W0' + str(fileInit + i) + '.CSV'\n        [xi, yi] = LoadFile(file, 29, xRange, yRange)\n        x.append(xi)\n        y.append(yi)\n        L.append(len(xi))\n    return [x,y,L]\n\ndef LoadFile(file,jump, xRange, yRange):\n    #jump especifica cuantas filas se salta\n    with open(file, newline='') as file:\n        reader = csv.reader(file, delimiter =',')\n        for k in range(jump):\n            next(reader)\n        xi = []; yi = []\n        for row in reader:\n            auxX = float(row[0])\n            auxY = float(row[1])\n            if (auxX >= xRange[0] and auxX <= xRange[1]):\n                xi.append(auxX)\n                if auxY < yRange[0]:\n                    auxY = yRange[0]\n                if auxY > yRange[1]:\n                    auxY = yRange[1]\n                yi.append(auxY)\n    return [xi,yi]\n\ndef SelectLaserSignal(x,y,L):\n    LL = len(L)\n    x1 = np.empty(LL)\n    x2 = np.empty(LL)\n    ymax = np.empty(LL)\n    FWHM = np.empty(LL)\n    #Hallar todos y elegir el mayoor pico de potencia\n    for i in range(LL):\n        xi = np.array(x[i])\n        yi = np.array(y[i])\n        x1[i], x2[i], ymax[i], FWHM[i] = Calculate_yMax_FWHM(xi, yi)\n    kymax = np.argmax(ymax)\n    return kymax, ymax[kymax], FWHM[kymax]\n\ndef Calculate_yMax_FWHM(x, y):\n    kmax = np.argmax(y)\n    ymax = y[kmax]\n    y3dB = ymax - 3\n    d = np.asarray(np.where((y - y3dB) > 0))\n    k1 = d[0, 0]\n    k2 = d[0, -1]\n    FWHM = x[k2] - x[k1]\n    return x[k1], x[k2], ymax, FWHM\n\n\ndef PlotLaserFeatures(x,y, xRange, yRange, height, prom, dist):\n    fig, ax = plt.subplots()\n    ax.set_xlim(xRange)\n    ax.set_ylim(yRange)\n    # ax.set_xlabel('Longitud de onda (nm)', fontsize=16)\n    ax.set_xlabel('Wavelength (nm)', fontsize=16)\n    # ax.set_ylabel('Transmisión (dB)', fontsize=16)\n    ax.set_ylabel('Output power (dBm)', fontsize=16)\n    plt.plot(x, y, color='k', linewidth=0.8)\n    x1, x2, ymax, FWHM = Calculate_yMax_FWHM(x,y)\n    # FWHM\n    #left arrow\n    xy1 = (x1,ymax-3)\n    xytext1 =(x1-1,ymax-3)\n    ax.annotate('', xy=xy1, xycoords='data',\n                xytext=xytext1, textcoords='data',\n                arrowprops=dict(arrowstyle=\"->\",\n                                ec=\"k\",\n                                shrinkA=0, shrinkB=0))\n    #right arrow\n    xy2 = (x2, ymax - 3)\n    xytext2 = (x2+1, ymax - 3)\n    ax.annotate('', xy=xy2, xycoords='data',\n                xytext=xytext2, textcoords='data',\n                arrowprops=dict(arrowstyle=\"->\",\n                                ec=\"k\",\n                                shrinkA=0, shrinkB=0))\n    xFWHM = x1+1\n    yFWHM = ymax-2\n    plt.text(xFWHM, yFWHM, ' FWHM\\n' + str(round(FWHM,4)) + 'nm')\n    # SMSR\n    SMSR, peaksDec, xPeaksDec = CalculateSMSR(x, y, height, prom, dist)\n    xprom = (xPeaksDec[0] + xPeaksDec[1]) / 2\n    yprom = (peaksDec[0]+peaksDec[1])/2\n    xy = ((xPeaksDec[1]+3*xPeaksDec[0])/4, peaksDec[1])\n    xytext = ((xPeaksDec[1]+3*xPeaksDec[0])/4, peaksDec[0])\n    ax.annotate('', xy=xy, xycoords='data',\n                xytext=xytext, textcoords='data',\n                arrowprops=dict(arrowstyle=\"<->\",\n                                ec=\"k\",\n                                shrinkA=0, shrinkB=0))\n    plt.text(xprom,yprom,' SMSR\\n'+str(SMSR)+'dB')\n    fig.tight_layout(pad=0)\n    auxWidth = 26 * cm\n    auxHeight = 15 * cm\n    figure = plt.gcf()\n    figure.set_size_inches(auxWidth, auxHeight)\n    plt.tight_layout()\n    # plt.savefig(r'%d.png' % i, dpi=300, transparent=True, bbox_inches='tight', bbox_extra_artists=(lgd,))\n    plt.savefig('Laser.png', dpi=300, transparent=True, bbox_inches='tight')\n    return\n\n#def CalculateSMSR(x,y,L, height, thresh, prom):\ndef CalculateSMSR(x, y, height, prom, dist):\n    x = np.array(x)\n    y = np.array(y)\n    peaksIndex, properties = signal.find_peaks(y, height=height, prominence=prom, distance=dist)\n    peaks = y[peaksIndex]\n    xPeaks = x[peaksIndex]\n    #Sorting ascending\n    peaksSorted = np.sort(peaks)\n    kSorted = np.argsort(peaksSorted)\n    peaksIndexSorted = peaksIndex[kSorted]\n    kmax = kSorted[-1]\n    if kmax == len(peaks)-1: #si el mayor está al final\n        peaksDec = np.array([peaks[-1], peaks[-2]])\n        xPeaksDec = np.array([xPeaks[-1], xPeaks[-2]])\n    elif kmax==0: #si el mayor está al inicio\n        peaksDec = np.array([peaks[0], peaks[1]])\n        xPeaksDec = np.array([xPeaks[0], xPeaks[1]])\n    else: #el mayor esta intermedio, comparar izq y derecha\n        peaksRight = peaks[kmax + 1]\n        peaksLeft = peaks[kmax - 1]\n        if peaksRight>=peaksLeft:\n            peaksDec = np.array([peaks[kmax], peaks[kmax + 1]])\n            xPeaksDec = np.array([xPeaks[kmax], xPeaks[kmax+1]])\n        else:\n            peaksDec = np.array([peaks[kmax], peaks[kmax -1]])\n            xPeaksDec = np.array([xPeaks[kmax], xPeaks[kmax - 1]])\n    SMSR = abs(peaksDec[0] - peaksDec[1])\n    return SMSR, peaksDec, xPeaksDec\n\ndef LaserStability3DInteractive(x,y,time):\n    NOF = len(time)\n    figS = go.Figure()\n    for i in range(NOF):\n        xi = x[i]\n        yi = time[i] * np.ones(len(xi))\n        zi = y[i]\n        figS.add_trace(go.Scatter3d(x=xi,\n                                    y=yi,\n                                    z=zi,\n                                    mode='lines',\n                                    showlegend=False,\n                                    marker=dict(\n                                        size=12,\n                                        opacity=0.8\n                                        )))\n    figS.update_layout(title=\"Stability\")\n    figS.show()\n    return\n\ndef LaserStability3D(x, z, time,xRange):\n    fig = plt.figure()\n    ax = pl.subplot(projection='3d')\n    cValue = []\n    verts = []\n    NS = len(time)\n    #for i in range(NS-1,-1,-1):\n    for i in range(NS):\n        yi = [i] * len(x[i])\n        #cValue.append(str(paramSel[i]))\n        #cValue.append(str(paramSel[NS - 1 - i]))\n        zi = z[i]\n        Lz = len(zi)\n        xp = np.array([x[i]])\n        yp = np.array([yi])\n        zp = np.array([zi])\n        ax.plot_wireframe(xp, yp, zp, color='k',linewidth=1)\n        #ax.plot3D(xi, ci, zi, color='k',linewidth=1)\n    ax.set_xlabel('Wavelength (nm)',fontsize=14)\n    ax.set_ylabel('Time(s)',fontsize=14)\n    #plt.xticks(fontsize=12)\n    #plt.yticks(fontsize=12)\n    ax.set_zticks(list(range(-90,-9,10)),fontsize=20)\n    pl.xticks(list(range(1545,1561,5)), ['1545', '1550', '1555', '1560'])\n    pl.yticks(list(range(NS)), ['0','','','','','','','','','','80'])\n    ax.set_zlabel('Output power (dBm)',fontsize=14)\n    ax.set_xlim(xRange[0], xRange[1])\n    ax.set_zlim(-80, -10)\n    ax.view_init(elev=1., azim=-66)\n    pl.show()\n    pl.grid\n    #Setting figure\n    fig.tight_layout(pad=0)\n    auxWidth = 26 * cm\n    auxHeight = 15 * cm\n    figure = pl.gcf()\n    figure.set_size_inches(auxWidth, auxHeight)\n    pl.tight_layout()\n    pl.savefig('Stability.png', dpi=300, transparent=True, bbox_inches='tight')\n    return\n\n\ndef PlotInteractiveLin(df1, paramSel, val):\n    NOF = len(paramSel)\n    col_names = df1.columns.values[1:NOF+1]\n    paramStr = col_names.tolist()\n    colorLegend =[ ' black', ' blue', ' blueviolet', ' brown', ' cadetblue', ' chocolate', ' coral',\n                    ' cornflowerblue', ' crimson', ' darkblue', ' darkcyan', ' darkmagenta', ' darkorange', ' darkred',\n                    ' darkseagreen', ' darkslategray', ' darkviolet', ' deeppink', ' deepskyblue', ' dodgerblue',\n                    ' firebrick', ' forestgreen', ' fuchsia', ' gold', ' goldenrod', ' green', ' hotpink', ' indianred',\n                    ' indigo', ' orangered', ' purple', ' rebeccapurple', ' red', ' saddlebrown', ' salmon',\n                    ' seagreen', ' sienna', ' slateblue', ' steelblue', ' violet', ' yellowgreen', 'aqua', 'aquamarine',\n                    'darkgoldenrod', 'darkorchid', 'darkslateblue', 'darkturquoise', 'greenyellow', 'navy',\n                    'palevioletred', 'royalblue', 'sandybrown']\n    A = df1[\"Wavelength\"].tolist()\n    fig1 = make_subplots(1,2)\n    for i in range(NOF):\n        B = df1[paramStr[i]]\n        fig1.add_trace(go.Scatter(\n            x=A,\n            y=B,\n            legendgroup = 'lgd'+str(i),\n            name=paramStr[i],\n            mode=\"lines\",\n            line_color=colorLegend[i],\n            ),row=1, col=1)\n    #fig1.update_layout(legend_title_text=paramTitle)\n    # add val points\n    for i in range(len(paramStr)):\n        A1 = df1[~pd.isnull(df1[val + str(i)])]['Wavelength'].tolist()\n        B1 = df1[~pd.isnull(df1[val + str(i)])][paramStr[i]].tolist()\n        fig1.add_trace(go.Scatter(\n            x=A1,\n            y=B1,\n            legendgroup = 'lgd'+ str(i),\n            name =paramStr[i],\n            mode =\"markers\",\n            marker_color = colorLegend[i],\n            showlegend=False\n            ),row =1, col =1)\n    for i in range(len(paramStr)):\n        BB = df1[~pd.isnull(df1[val + str(i)])]['Wavelength'].tolist()\n        AA = [paramSel[i]]*len(BB)\n        fig1.add_trace(go.Scatter(\n            x= AA,\n            y=BB,\n            legendgroup ='lgd' + str(i),\n            name =paramStr[i],\n            mode =\"markers\",\n            marker_color = colorLegend[i],\n            showlegend=False,\n            ),row=1, col=2)\n    return fig1\n\ndef DownSample(x,m):\n    xDown = []\n    i = 0\n    while i <= len(x):\n        if (i % m )==0:\n             xDown.append(x[i])\n        i = i+1\n    return(xDown)\n\ndef ReadFolderTx(df, fileInit, param, xRange):\n    xi = []; yi = []\n    NOF =len(param) # número de columnas\n    for i in range(NOF):\n        if fileInit + i  < 10:\n             #file = 'W000' + str(fileInit + i) + '.csv'\n             file = 'W00' + str(fileInit + i) + '.CSV'\n        else:\n             if fileInit + i  < 100:\n                #file = 'W00' + str(fileInit + i) + '.csv'\n                file = 'W00' + str(fileInit + i) + '.CSV'\n             else:\n                #file = 'W0' + str(fileInit + i) + '.csv'\n                file = 'W0' + str(fileInit + i) + '.CSV'\n        [xi,yi] = LoadFile(file, 29, xRange)\n        df[str(param[i])] = yi - df['ASE']\n    return df\n\ndef ReadFolderLaserSame(df, fileInit, param, xRange):\n    x = []; y = []\n    NOF =len(param) # número de columnas\n    for i in range(NOF):\n        if fileInit + i  < 10:\n             file = 'W000' + str(fileInit + i) + '.csv'\n        else:\n             if fileInit + i  < 100:\n                file = 'W00' + str(fileInit + i) + '.csv'\n             else:\n                file = 'W0' + str(fileInit + i) + '.csv'\n        dfi = pd.read_csv(file, skiprows=29,header=None, names=[\"Wavelength\", str(param[i])])\n        dfi = dfi[(dfi['Wavelength'] >= xRange[0]) & (dfi['Wavelength'] <= xRange[1])]\n        df[str(param[i])] = dfi[str(param[i])] - df['ASE']\n    return df\n\ndef FastFourier(x ,y):\n    N = len(x)\n    dx = round(x[1] - x[0],4)\n    Fs = 1/dx\n    Y = fft(y)\n    sF = fftfreq(N, dx)[:N // 2]\n    mY = 2.0 / N * np.abs(Y[0:N // 2])\n    k1 = math.floor(N/Fs)\n    return [sF[:k1], mY[:k1]]\n\n\"\"\"\nfig = make_subplots()\n    fig.add_trace(go.Scatter(\n        x=sF,\n        y= mY,\n        mode=\"lines\",\n        line_color='black',\n        showlegend=True,\n    ))\n    fig.show()\"\"\"\n\"\"\"\n    plt.plot(sf, 2.0 / N * np.abs(Y[0:N // 2]), 'k-')\n    xlim(0, 1)\n    ylim(0, 10)\n    plt.xticks(np.arange(0, 1.1, 0.2))\n    plt.yticks(np.arange(0, 11, 2))\n    xlabel('Spatial frequency ($nm^{-1}$)', fontdict=font)\n    ylabel('Magnitude (A.U.)', fontdict=font)\n    plt.tick_params(labelsize=10, width=1)\n    auxWidth = 8.9 * cm\n    auxHeight = 8 * cm\n    figure = plt.gcf()\n    figure.set_size_inches(auxWidth, auxHeight)\n    plt.savefig(\"FFT.png\", dpi=300, bbox_inches=\"tight\", pad_inches=0.1, transparent=True)\n    plt.show()\n    \"\"\"\ndef WaveletDecomposition(x, y, MW, DL):\n    colorLegend = [' black', ' blue', ' blueviolet', ' brown', ' cadetblue', ' chocolate', ' coral',\n                   ' cornflowerblue', ' crimson', ' darkblue', ' darkcyan', ' darkmagenta', ' darkorange', ' darkred',\n                   ' darkseagreen', ' darkslategray', ' darkviolet', ' deeppink', ' deepskyblue', ' dodgerblue',\n                   ' firebrick', ' forestgreen', ' fuchsia', ' gold', ' goldenrod', ' green', ' hotpink', ' indianred',\n                   ' indigo', ' orangered', ' purple', ' rebeccapurple', ' red', ' saddlebrown', ' salmon',\n                   ' seagreen', ' sienna', ' slateblue', ' steelblue', ' violet', ' yellowgreen', 'aqua', 'aquamarine',\n                   'darkgoldenrod', 'darkorchid', 'darkslateblue', 'darkturquoise', 'greenyellow', 'navy',\n                   'palevioletred', 'royalblue', 'sandybrown']\n    N = len(y)\n    L = []\n    coeffs = pywt.wavedec(y, MW, mode='symmetric', level=DL, axis=-1)\n    cAux = [];\n    for i in range(DL + 1):\n        L.append(len(coeffs[i]))\n        cAux.append(np.zeros(L[i]))\n        yr = []\n    fig1 = make_subplots()\n    for i in range(DL - 1):\n        cAux[i] = coeffs[i]\n        yr.append(pywt.waverec(cAux, MW))\n        cAux[i] = np.zeros(L[i])\n        if i == 0:\n            fig1.add_trace(go.Scatter(\n                x=x,\n                y=y,\n                mode=\"lines\",\n                line_color=colorLegend[-1],\n                name = 'signal'\n                ))\n        if i==0:\n            nameLeg = 'a' + str(DL)\n        else:\n            nameLeg = 'd' + str(DL - i)\n\n        fig1.add_trace(go.Scatter(\n            x=x,\n            y=yr[i],\n            mode=\"lines\",\n            line_color=colorLegend[i],\n            name=nameLeg\n            ))\n    [sF, mY] = FastFourier(x, y)\n    fig2 = make_subplots()\n    for i in range(DL - 1):\n        [sFi, mYi] = FastFourierPlot(x, yr[i])\n        if i == 0:\n            fig2.add_trace(go.Scatter(\n                x= sF,\n                y= mY,\n                mode=\"lines\",\n                line_color=colorLegend[-1],\n                name='FFT signal'\n                ))\n        if i==0:\n            nameLeg = 'a' + str(DL)\n        else:\n            nameLeg = 'd' + str(DL - i)\n        fig2.add_trace(go.Scatter(\n            x=sFi,\n            y=mYi,\n            line_color=colorLegend[i],\n            name=nameLeg\n            ))\n    return fig1, fig2\n\n    \"\"\"\n    fig1 = make_subplots(DL-1, 1, shared_xaxes=True)\n    for i in range(DL-1):\n        cAux[i] = coeffs[i]\n        yr = pywt.waverec(cAux, MW)\n        cAux[i] = np.zeros(L[i])\n        if i==0:\n            fig1.add_trace(go.Scatter(\n                x=x,\n                y=y,\n                mode=\"lines\"), row=i + 1, col=1)\n\n        fig1.add_trace(go.Scatter(\n            x=x,\n            y=yr,\n            mode=\"lines\"), row=i + 1, col=1)\n    \"\"\"\n\ndef SignalPlot(x,y):\n    fig = make_subplots(1)\n    fig.add_trace(go.Scatter(\n            x=x,\n            y=y,\n            mode=\"lines\",\n            line_color='black',\n            ))\n    fig.show()\n\n\ndef SignalSpectrogram(x,y):\n    y = np.array(y)\n    fig, ax = plt.subplots()\n    dx = round(x[1] - x[0],4)\n    Lx = len(x)\n    Fs = int(1/dx)\n    SF, wavelength, Sxx = signal.spectrogram(y, Fs)\n    ax.pcolormesh(wavelength, SF, Sxx, shading='gouraud')\n    ax.set_ylabel('Spatial frequency (1/nm)')\n    ax.set_xlabel('Wavelength (nm)')\n    \"\"\"\n    powerSpectrum, freqenciesFound, time, imageAxis = plt.specgram(y,Lx,Fs)\n    plt.xlabel('Wavelength (nm)')\n    plt.ylabel('Spatial frequency (1/nm)')\n    plt.show()\n    \"\"\"\n    return fig\n\ndef LaserStability(df, xRange, paramSel):\n    color = ['k','b','r','g','c','m','y']\n    pl.figure()\n    ax = pl.subplot(projection='3d')\n    zi = []\n    cValue = []\n    verts = []\n    auxXi =df[(df['Wavelength'] >= xRange[0]) & (df['Wavelength'] <= xRange[1])]['Wavelength']\n    xi =auxXi.tolist()\n    Lx = len(xi)\n    NS = len(paramSel)\n    for i in range(NS-1,-1,-1):\n        ci = [i] * len(xi)\n        Lc = len(ci)\n        cValue.append(str(paramSel[NS-1-i]))\n        zi = df[(df['Wavelength'] >= xRange[0]) & (df['Wavelength'] <= xRange[1])][str(paramSel[i])].tolist()\n        Lz = len(zi)\n        ax.plot(xi, ci, zi, color=color[i],linewidth=1)\n    ax.set_xlabel('Wavelength (nm)')\n    ax.set_yticks(list(range(NS)))\n    ax.set_yticklabels(cValue)\n    ax.set_zlabel('Output power (dBm)')\n    ax.set_xlim(xRange[0], xRange[1])\n    ax.set_zlim(-70,-20)\n    return\n\ndef TxRef(x1,y1,xRange):\n    maxY1 = 0\n    minY1 = min(y1)\n    fig, ax = plt.subplots()\n    ax.set_xlim(xRange)\n    ax.set_ylim([minY1, maxY1])\n    #ax.set_xlabel('Longitud de onda (nm)', fontsize=16\n    ax.set_xlabel('Wavelength (nm)', fontsize=16)\n    #ax.set_ylabel('Transmisión (dB)', fontsize=16)\n    ax.set_ylabel('Transmission (dB)', fontsize=16)\n    #plt.show()\n    plt.plot(x1, y1, linewidth=0.8, color='k')\n    fig.tight_layout(pad=0)\n    auxWidth = 24 * cm\n    auxHeight = 15 * cm\n    figure = plt.gcf()\n    figure.set_size_inches(auxWidth, auxHeight)\n    plt.tight_layout()\n    plt.savefig('TxRef', dpi=300,transparent=True, bbox_inches='tight')\n    return\n\n\ndef TxParametric(df1, varControl):\n    #legend title\n    if varControl == 'Temp':\n        title = r'$\\mathrm{Temp.} (^{\\circ}C)$'\n    elif varControl == 'Curv':\n        title = r'$\\mathrm{Curv} (m^{-1})$'\n    elif varControl == 'Torsion':\n        title = r'$\\mathrm{Torsion} (^{\\circ})$'\n        #title = r'$\\mathrm{Temp} (^{\\circ})$'\n    else:\n        title = ''\n    col_names = df1.columns.values[2:]\n    paramStr = col_names.tolist()\n    NOF = len(paramStr)\n    #df1 = df[(df['Wavelength'] >= xRange[0]) & (df['Wavelength'] <= xRange[1])]\n    #Useful to see the insertion loss\n    #maxY1 = df1[paramStr].max()\n    maxY1 = 0\n    minY1 = df1[paramStr].min()\n    fig, ax = plt.subplots()\n    for i in range(NOF):\n        plt.plot(df1[\"Wavelength\"], df1[paramStr[i]], linewidth=0.8)\n    lgd = plt.legend(paramStr, fontsize=8,\n                            title=title,\n                            title_fontsize=12,\n                            bbox_to_anchor=(1.1, 1),\n                            loc='upper right',\n                            fancybox=False)\n    #SEt xlim,ylim\n    xmin = min(df1[\"Wavelength\"].tolist())\n    xmax = max(df1[\"Wavelength\"].tolist())\n    ax.set_xlim([xmin,xmax])\n    ax.set_ylim([min(minY1), maxY1])\n    ax.set_xlabel('Wavelength (nm)', fontsize=16)\n    # ax.set_xlabel('Longitud de onda (nm)', fontsize=16)\n    ax.set_ylabel('Transmission (dB)', fontsize=16)\n    # ax.set_ylabel('Transmisión (dB)', fontsize=16)\n    #Arrow indicating the tunning direction\n    xOrigin = ( xmin + xmax ) / 2\n    yOrigin = -1\n    ax.annotate('', xy=(xOrigin, yOrigin), xycoords='data',\n                xytext=(xOrigin-1, yOrigin), textcoords='data',\n                arrowprops=dict(arrowstyle=\"->\",\n                                ec=\"k\",\n                                shrinkA=0, shrinkB=0))\n    fig.tight_layout(pad=0)\n    auxWidth = 24 * cm\n    auxHeight = 15 * cm\n    figure = plt.gcf()\n    figure.set_size_inches(auxWidth, auxHeight)\n    plt.tight_layout()\n    #plt.savefig(r'%d.png'%i, dpi=300,transparent=True, bbox_inches='tight',bbox_extra_artists=(lgd,))\n    plt.savefig('TxParamTempInc.png', dpi=300, transparent=True, bbox_inches='tight', bbox_extra_artists=(lgd,))\n    return\n
===================================================================
diff --git a/Funciones.py b/Funciones.py
--- a/Funciones.py	
+++ b/Funciones.py	
@@ -130,8 +130,8 @@
             df['FWHM' + str(i)][peaksIndex[j]] = FWHM
     return df
 
-def PlotInteractiveTx(df1, paramTitle):
-    col_names = df1.columns.values[1:]
+def PlotInteractiveTx(df1):
+    col_names = df1.columns.values[2:]
     paramStr = col_names.tolist()
     NOF = len(paramStr)
     colorLegend =[ ' black', ' blue', ' blueviolet', ' brown', ' cadetblue', ' chocolate', ' coral',
@@ -146,7 +146,7 @@
     A = df1["Wavelength"].tolist()
     fig1 = make_subplots()
     for i in range(NOF):
-        B = df1[paramStr[i]]
+        B = df1[paramStr[i]].tolist()
         fig1.add_trace(go.Scatter(
             x=A,
             y=B,
@@ -155,7 +155,6 @@
             mode="lines",
             line_color=colorLegend[i],
             ))
-    fig1.update_layout(legend_title_text=paramTitle)
     return fig1
 
 def PlotInteractive(df1, param, paramTitle, val):
@@ -477,7 +476,7 @@
         i = i+1
     return(xDown)
 
-def ReadFolderTx(df, fileInit, param, xRange):
+def ReadFolderTx(df, fileInit, param, xRange, yRange):
     xi = []; yi = []
     NOF =len(param) # número de columnas
     for i in range(NOF):
@@ -491,7 +490,7 @@
              else:
                 #file = 'W0' + str(fileInit + i) + '.csv'
                 file = 'W0' + str(fileInit + i) + '.CSV'
-        [xi,yi] = LoadFile(file, 29, xRange)
+        [xi,yi] = LoadFile(file, 29, xRange, yRange)
         df[str(param[i])] = yi - df['ASE']
     return df
 
Index: Int1_Tx.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Uses python3\nimport os\nimport csv\nimport numpy as np\nimport pandas as pd\nimport Funciones as fu\npd.options.plotting.backend = \"plotly\"\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom pylab import *\n#import Matrix as mat\nimport matplotlib.pyplot as plt\nfrom scipy.fft import fft, ifft, fftfreq\nfrom matplotlib.widgets import Cursor, Button\n\n\n#cm = 1/2.54  # centimeters in inches\n\n##main\n#initial xRange\nxRange = [1520,1570]\nwhichDir = os.getcwd()  # current directory\n#load ASE\nos.chdir('/home/estudiante/PythonDoctorado/Signals/Interferometro_01/Erbio')\n#ASE corresponding to laser diode current = 140 mA\n[xASE,yASE] = fu.LoadFile('W0255.CSV',29,xRange)\nx = fu.DownSample(xASE,5)\nyASE_Down = fu.DownSample(yASE,5)\n# MZI folder\nos.chdir('/home/estudiante/PythonDoctorado/Signals/Interferometro_01/Temperature/Inc')\nwhichDir = os.getcwd()\n#temperatura\ndfParam = pd.read_csv('Inc.csv', skiprows=1,header=None, names=[\"fileName\", \"param\"])\nparam = dfParam[\"param\"].tolist()\ndf = pd.DataFrame(list(zip(x,yASE_Down)), columns = ['Wavelength','ASE'])#lista de floats\nfileInit = dfParam[\"fileName\"][0]\n#Read CSV files (.CSV upeprcase)\ndf = fu.ReadFolderTx(df, fileInit, param, xRange)\nparamTitle = 'Temperature (Celsius deg)'\n\"\"\"\nfig0 = fu.PlotInteractiveTx(df, param, paramTitle)\nfig0.show()\n\n#Choose temperature reference\nx1 = df[\"Wavelength\"].tolist()\ny1 = df[str(param[0])].tolist()\nfu.TxRef(x1,y1,xRange)\n\"\"\"\n#Tx parametric\n#Specify xRange\nxRange = [1546, 1560]\n#Specify varControl\nvarControl = 'Temp'\n#Specify parameter values (range de 25 a 120 porque sólo allí emitio el laser)\nindexSel = list(range(11))\nparamSel = []\nfor i in range(len(indexSel)):\n    k = indexSel[i]\n    paramSel.append(param[k])\ndfSel = fu.SelectDataFrame(df,xRange, param, indexSel)\nfu.TxParametric(dfSel, varControl)\n\"\"\"\n#Para graficar todos los valores de param\nfu.TxParametric(df,xRange, list(range(len(param))), varControl)\n\"\"\"\n#Linearity\nval= 'min'\ndfLin = fu.PointsLinearity(dfSel, val)\n#df1 = fu.PointsLinearity(df,xRange, param, val)\nfig1 = fu.PlotInteractiveLin(dfLin, paramSel, val)\nfig1.update_layout(title=\"MZI Giselle vs Temperature Inc.\")\nfig1.show()\n
===================================================================
diff --git a/Int1_Tx.py b/Int1_Tx.py
--- a/Int1_Tx.py	
+++ b/Int1_Tx.py	
@@ -12,20 +12,19 @@
 import matplotlib.pyplot as plt
 from scipy.fft import fft, ifft, fftfreq
 from matplotlib.widgets import Cursor, Button
-
-
 #cm = 1/2.54  # centimeters in inches
 
 ##main
-#initial xRange
-xRange = [1520,1570]
+#Initial xRange, yRange
+xRange, yRange = [1520,1570], [-80,0]
 whichDir = os.getcwd()  # current directory
 #load ASE
 os.chdir('/home/estudiante/PythonDoctorado/Signals/Interferometro_01/Erbio')
 #ASE corresponding to laser diode current = 140 mA
-[xASE,yASE] = fu.LoadFile('W0255.CSV',29,xRange)
+[xASE,yASE] = fu.LoadFile('W0255.CSV',29,xRange, yRange)
 x = fu.DownSample(xASE,5)
 yASE_Down = fu.DownSample(yASE,5)
+#fu.SignalPlot(x,yASE_Down)
 # MZI folder
 os.chdir('/home/estudiante/PythonDoctorado/Signals/Interferometro_01/Temperature/Inc')
 whichDir = os.getcwd()
@@ -35,20 +34,19 @@
 df = pd.DataFrame(list(zip(x,yASE_Down)), columns = ['Wavelength','ASE'])#lista de floats
 fileInit = dfParam["fileName"][0]
 #Read CSV files (.CSV upeprcase)
-df = fu.ReadFolderTx(df, fileInit, param, xRange)
-paramTitle = 'Temperature (Celsius deg)'
+df = fu.ReadFolderTx(df, fileInit, param, xRange, yRange)
 """
-fig0 = fu.PlotInteractiveTx(df, param, paramTitle)
+fig0 = fu.PlotInteractiveTx(df)
 fig0.show()
+"""
 
 #Choose temperature reference
 x1 = df["Wavelength"].tolist()
 y1 = df[str(param[0])].tolist()
 fu.TxRef(x1,y1,xRange)
-"""
 #Tx parametric
 #Specify xRange
-xRange = [1546, 1560]
+xRange = [1545, 1565]
 #Specify varControl
 varControl = 'Temp'
 #Specify parameter values (range de 25 a 120 porque sólo allí emitio el laser)
@@ -59,10 +57,10 @@
     paramSel.append(param[k])
 dfSel = fu.SelectDataFrame(df,xRange, param, indexSel)
 fu.TxParametric(dfSel, varControl)
-"""
+
 #Para graficar todos los valores de param
 fu.TxParametric(df,xRange, list(range(len(param))), varControl)
-"""
+
 #Linearity
 val= 'min'
 dfLin = fu.PointsLinearity(dfSel, val)
@@ -70,3 +68,4 @@
 fig1 = fu.PlotInteractiveLin(dfLin, paramSel, val)
 fig1.update_layout(title="MZI Giselle vs Temperature Inc.")
 fig1.show()
+"""
\ No newline at end of file
